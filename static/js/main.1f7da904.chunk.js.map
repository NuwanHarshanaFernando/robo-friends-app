{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","id","name","email","className","alt","src","CardList","robots","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","onRequestRobots","searchField","onSearchChange","isPending","filterRobots","filter","robot","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","Boolean","window","location","hostname","match","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1f7da904.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\n/**Destructuring Parameters**/\r\nconst Card = ({id, name, email}) => {\r\n  \r\n    return (\r\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n            <img alt='robots' src={`https://robohash.org/${id}?200x200`} />\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>    \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\n\r\nconst CardList = ({robots}) => {\r\n   /*\r\n    if(true){\r\n        throw new Error('Nooooo!');\r\n    }\r\n    */\r\n    return(\r\n    <div>  \r\n        { \r\n            robots.map((user, i) => {\r\n                return (\r\n                    <Card \r\n                    key={i} \r\n                    id={robots[i].id} \r\n                    name={robots[i].name} \r\n                    email={robots[i].email}\r\n                    />\r\n                );\r\n            })\r\n        }\r\n    </div>\r\n    );\r\n}\r\n\r\n\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({ searchfield, searchChange }) => {\r\n    return(\r\n        <div>\r\n            <input \r\n                className = 'pa3 ba b--green bg-lightest-blue'\r\n                type ='search' \r\n                placeholder ='Search Robots'\r\n                onChange = {searchChange}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react'\r\n\r\nconst Scroll = (props) => {\r\n    return(\r\n        <div style={{ overflow: 'scroll', border: '5px solid black', height: '800px'}}>\r\n            {props.children}\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundry extends Component{\r\n    constructor(props){\r\n        super();\r\n        this.state = {\r\n            hasError : false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error, info){\r\n        this.setState({ hasError: true })\r\n    }\r\n\r\n    render() {\r\n        if(this.state.hasError){\r\n            return <h1>Ooopos. That is not good</h1>\r\n        }\r\n        return this.props.children\r\n    }\r\n}\r\n\r\nexport default ErrorBoundry;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundry from '../components/ErrorBoundry';\r\nimport './App.css';\r\n\r\nimport { setSearchField, requestRobots } from '../actions'\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        searchField: state.searchRobots.searchField,\r\n        robots: state.requestRobots.robots,\r\n        isPending: state.requestRobots.isPending,\r\n        error:state.requestRobots.error\r\n       \r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return{\r\n        onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n        onRequestRobots: () => dispatch(requestRobots())\r\n    }\r\n}\r\n\r\nclass App extends Component{\r\n    /*\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            robots: []\r\n        }\r\n    }\r\n    */\r\n\r\n    componentDidMount(){\r\n       // console.log(this.props.store.getState())\r\n\r\n       /* fetch('http://jsonplaceholder.typicode.com/users')\r\n        .then(response => response.json())\r\n        .then(users => this.setState({robots:users}));\r\n        */\r\n\r\n        this.props.onRequestRobots();\r\n\r\n    }\r\n  \r\n\r\n   \r\n\r\n    render(){\r\n\r\n       //const {robots, searchfield} = this.state;\r\n       // const {robots} = this.state;\r\n        const {searchField, onSearchChange, robots, isPending} = this.props;\r\n        const filterRobots = robots.filter(robot =>{\r\n            return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n        })\r\n      \r\n        return isPending ?\r\n            <h1>Loading</h1> :\r\n        \r\n            (\r\n                <div className='tc'>\r\n                    <h1 className='f2'>RoboFriends</h1>\r\n                    <SearchBox searchChange = {onSearchChange}/> \r\n                    <Scroll>\r\n                        <ErrorBoundry>\r\n                            <CardList robots={filterRobots}/> \r\n                        </ErrorBoundry>    \r\n                    </Scroll>    \r\n                </div>\r\n            );\r\n        \r\n       \r\n    }\r\n    \r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n\r\n\r\n//Install a Redux Middleware called 'redux-thunk' to handle asynchronous actions\r\n//npm install redux-thunk","import {\r\n     CHANGE_SEARCH_FIELD,\r\n     REQUEST_ROBOTS_PENDING,\r\n     REQUEST_ROBOTS_SUCCESS,\r\n     REQUEST_ROBOTS_FAILED \r\n} from './constants.js'\r\n\r\n\r\nexport const setSearchField = (text) => ({\r\n    type: 'CHANGE_SEARCH_FIELD',\r\n    payload: text\r\n})\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n    dispatch({type: REQUEST_ROBOTS_PENDING});\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response => response.json())\r\n        .then(data => dispatch({type: REQUEST_ROBOTS_SUCCESS, payload: data }))\r\n        .catch(error => dispatch({type: REQUEST_ROBOTS_FAILED, payload: error }) )\r\n}\r\n\r\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { \r\n    CHANGE_SEARCH_FIELD ,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED \r\n} from './constants.js'\r\n\r\nconst initialStateSearch = {\r\n    searchField: ''\r\n}\r\n\r\nexport const searchRobots = (state=initialStateSearch, action={}) => {\r\n  /*  console.log(action.type) */\r\n    switch(action.type) {\r\n        case CHANGE_SEARCH_FIELD:\r\n            return Object.assign({}, state, {searchField:action.payload})\r\n            //return {...state, searchField:action.payload}\r\n        default:\r\n             return state;    \r\n    }\r\n}\r\n\r\nconst initialStateRobots = {\r\n    isPending: false,\r\n    robots: [],\r\n    error: ''\r\n}\r\n\r\nexport const requestRobots = (state=initialStateRobots, action={}) =>{\r\n    switch(action.type) {\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return Object.assign({}, state, {isPending: true})\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return Object.assign({}, state, {robots: action.payload, isPending: false})\r\n        case REQUEST_ROBOTS_FAILED:\r\n             return Object.assign({}, state, {error: action.payload, isPending: false})       \r\n        default:\r\n            return state;\r\n        }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware,combineReducers } from 'redux'\nimport { createLogger } from 'redux-logger'\nimport thunkMiddleware from 'redux-thunk'\nimport './index.css';\nimport App from './containers/App'\nimport * as serviceWorker from './serviceWorker';\nimport { searchRobots, requestRobots } from './reducers';\nimport 'tachyons';\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({ searchRobots, requestRobots })\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger))\n\n\n/*\nReactDOM.render(\n<App store={store}/>\n, document.getElementById('root'));\n*/\n\nReactDOM.render(\n    <Provider store={store}>\n     <App />\n    </Provider>\n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}